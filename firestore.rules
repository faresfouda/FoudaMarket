rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Users collection - users can read/write their own profile, admins can read all
    match /users/{userId} {
      // المستخدم يقرأ ويعدل بياناته فقط
      allow read, write: if request.auth != null && request.auth.uid == userId;

      // المدير يقرأ كل المستخدمين
      allow read: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Categories collection - anyone can read, admins and data_entry can write
    match /categories/{categoryId} {
      allow read: if true; // أي شخص يمكنه قراءة الفئات

      allow write: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        (
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' ||
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'data_entry'
        );
    }

    // Products collection - anyone can read, admins and data_entry can write
    match /products/{productId} {
      allow read: if true; // أي شخص يمكنه قراءة المنتجات

      allow write: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        (
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' ||
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'data_entry'
        );
    }

    // Orders collection - users can read their own orders, admins can read all
    match /orders/{orderId} {
      // إنشاء طلب جديد
      allow create: if request.auth != null &&
                    request.resource.data.userId == request.auth.uid;

      // قراءة الطلبات
      allow read: if request.auth != null &&
        (
          resource.data.userId == request.auth.uid ||
          (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
           (
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' ||
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'data_entry'
           ))
        );

      // تحديث وحذف الطلبات (للمديرين ومدخلي البيانات فقط)
      allow update, delete: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        (
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' ||
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'data_entry'
        );
    }

    // Cart collection - users can manage their own cart
    match /carts/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Reviews collection - authenticated users can create reviews, admins can manage all
    match /reviews/{reviewId} {
      allow read: if true; // أي شخص يمكنه قراءة المراجعات

      allow create: if request.auth != null &&
                    request.resource.data.userId == request.auth.uid;

      allow update, delete: if request.auth != null &&
        (
          resource.data.userId == request.auth.uid ||
          (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
           get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin')
        );
    }

    // Addresses collection - users can manage their own addresses
    match /addresses/{addressId} {
      allow read, write: if request.auth != null &&
                          resource.data.userId == request.auth.uid;
    }

    // Promo codes collection - read only for users, write for admins
    match /promoCodes/{promoId} {
      allow read: if request.auth != null;

      allow write: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // App settings - read for all, write for admins only
    match /settings/{settingId} {
      allow read: if true;

      allow write: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}
